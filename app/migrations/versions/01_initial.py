"""01_initial

Revision ID: 431db80110fc
Revises: 
Create Date: 2024-02-01 20:25:26.485383

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '431db80110fc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_request_response',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('request_schema', sa.Text(), nullable=True),
    sa.Column('response_schema', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('connect_parkinglot',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parking_lot_id', sa.Integer(), nullable=False),
    sa.Column('contact_email', sa.String(), nullable=False),
    sa.Column('grace_period', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('text_key', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider_feature',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('text_key', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('text_key', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('text_key', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('api_endpoint', sa.String(), nullable=True),
    sa.Column('oauth_path', sa.String(), nullable=True),
    sa.Column('auth_type', sa.String(), nullable=False),
    sa.Column('client_id', sa.String(), nullable=False),
    sa.Column('client_secret', sa.String(), nullable=False),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('fk_provider_type_id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.String(), nullable=True),
    sa.Column('expire_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_provider_type_id'], ['provider_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event_status', sa.String(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('parking_lot_id', sa.Integer(), nullable=False),
    sa.Column('parking_spot_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), nullable=True),
    sa.Column('event_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('plate_number', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('feature_text_key', sa.String(), nullable=False),
    sa.Column('fk_provider_type', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_provider_type'], ['provider_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('violation_configuration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pricing_type', sa.String(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('duration_amount', sa.Integer(), nullable=False),
    sa.Column('fk_connect_parkinglot_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_connect_parkinglot_id'], ['connect_parkinglot.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feature_url_path',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fk_provider_id', sa.Integer(), nullable=False),
    sa.Column('fk_provider_feature', sa.Integer(), nullable=True),
    sa.Column('path', sa.String(), nullable=False),
    sa.Column('request_schema', sa.String(), nullable=True),
    sa.Column('response_schema', sa.String(), nullable=True),
    sa.Column('request_type', sa.Enum('PULL', 'PUSH', name='featurerequesttype'), nullable=False),
    sa.Column('request_method', sa.String(), nullable=False),
    sa.Column('headers', sa.Text(), nullable=True),
    sa.Column('query_params', sa.Text(), nullable=True),
    sa.Column('api_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_provider_feature'], ['provider_feature.id'], ),
    sa.ForeignKeyConstraint(['fk_provider_id'], ['provider.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider_connect',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fk_connect_parkinglot_id', sa.Integer(), nullable=False),
    sa.Column('fk_provider_id', sa.Integer(), nullable=False),
    sa.Column('facility_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_connect_parkinglot_id'], ['connect_parkinglot.id'], ),
    sa.ForeignKeyConstraint(['fk_provider_id'], ['provider.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('push_payment',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('start_date_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('end_date_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('price_paid', sa.String(), nullable=False),
    sa.Column('plate_number', sa.String(), nullable=False),
    sa.Column('original_response', sa.String(), nullable=False),
    sa.Column('is_checked', sa.Boolean(), nullable=False),
    sa.Column('fk_provider_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_provider_id'], ['provider.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('violation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('fk_task', sa.Integer(), nullable=False),
    sa.Column('violation_type', sa.String(), nullable=True),
    sa.Column('amount_due', sa.Integer(), nullable=False),
    sa.Column('plate_number', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_task'], ['task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feature_event_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fk_provider_feature', sa.Integer(), nullable=False),
    sa.Column('fk_event_types', sa.Integer(), nullable=False),
    sa.Column('fk_url_path_id', sa.Integer(), nullable=True),
    sa.Column('fk_provider_connect', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_event_types'], ['event_types.id'], ),
    sa.ForeignKeyConstraint(['fk_provider_connect'], ['provider_connect.id'], ),
    sa.ForeignKeyConstraint(['fk_provider_feature'], ['provider_feature.id'], ),
    sa.ForeignKeyConstraint(['fk_url_path_id'], ['feature_url_path.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sub_task',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fk_task', sa.Integer(), nullable=False),
    sa.Column('fk_provider', sa.Integer(), nullable=False),
    sa.Column('fk_feature_url_path', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fk_feature_url_path'], ['feature_url_path.id'], ),
    sa.ForeignKeyConstraint(['fk_provider'], ['provider.id'], ),
    sa.ForeignKeyConstraint(['fk_task'], ['task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sub_task')
    op.drop_table('feature_event_type')
    op.drop_table('violation')
    op.drop_table('push_payment')
    op.drop_table('provider_connect')
    op.drop_table('feature_url_path')
    op.drop_table('violation_configuration')
    op.drop_table('task')
    op.drop_table('provider')
    op.drop_table('provider_types')
    op.drop_table('provider_feature')
    op.drop_table('event_types')
    op.drop_table('connect_parkinglot')
    op.drop_table('audit_request_response')
    # ### end Alembic commands ###
