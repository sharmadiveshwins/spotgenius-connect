"""26_type_and_is_enabled_in_feature

Revision ID: 9b3085c42e3d
Revises: 3faf787a8246
Create Date: 2024-07-04 19:12:30.404706

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9b3085c42e3d'
down_revision: Union[str, None] = '3faf787a8246'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    feature_type_enum = postgresql.ENUM('UNDEFINED', 'PAYMENT', 'RESERVATION', 'ENFORCEMENT', name='featuretype')
    feature_type_enum.create(op.get_bind())

    op.add_column('feature', sa.Column('feature_type', feature_type_enum, server_default='UNDEFINED'))
    op.execute('UPDATE feature SET feature_type = \'UNDEFINED\' WHERE feature_type IS NULL')
    op.alter_column('feature', 'feature_type', nullable=False, server_default=None)

    op.add_column('feature', sa.Column('is_enabled', sa.Boolean(), server_default=sa.true()))

    # Update existing rows to set a value for is_enabled
    op.execute('UPDATE feature SET is_enabled = true WHERE is_enabled IS NULL')

    # Alter the column to not allow nulls
    op.alter_column('feature', 'is_enabled', nullable=False, server_default=None)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('feature', 'feature_type')
    op.drop_column('feature', 'is_enabled')
    # ### end Alembic commands ###
